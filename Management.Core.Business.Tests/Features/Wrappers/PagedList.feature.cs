// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Management.Core.Business.Tests.Features.Wrappers
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PagedListFeature : object, Xunit.IClassFixture<PagedListFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PagedList.feature"
#line hidden
        
        public PagedListFeature(PagedListFeature.FixtureData fixtureData, Management_Core_Business_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Wrappers", "PagedList", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "2"});
            table1.AddRow(new string[] {
                        "3"});
            table1.AddRow(new string[] {
                        "4"});
            table1.AddRow(new string[] {
                        "5"});
            table1.AddRow(new string[] {
                        "6"});
            table1.AddRow(new string[] {
                        "7"});
            table1.AddRow(new string[] {
                        "8"});
#line 4
 testRunner.Given("The following array is provide for pagination", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Pagination list give consistant data")]
        [Xunit.TraitAttribute("FeatureTitle", "PagedList")]
        [Xunit.TraitAttribute("Description", "Pagination list give consistant data")]
        [Xunit.InlineDataAttribute("2", "2", "8", "2", "2", "2", "3", "4", "4", "1", "1", new string[0])]
        [Xunit.InlineDataAttribute("1", "8", "8", "8", "1", "8", "1", "8", "1", "0", "0", new string[0])]
        [Xunit.InlineDataAttribute("2", "6", "8", "6", "2", "2", "7", "8", "2", "1", "0", new string[0])]
        public virtual void PaginationListGiveConsistantData(string pageNumber, string pageSize, string totalCount, string lPageSize, string lPageNumber, string currentPageSize, string currentStartIndex, string currentEndIndex, string lTotalPages, string hasPrevious, string hasNext, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("pageNumber", pageNumber);
            argumentsOfScenario.Add("pageSize", pageSize);
            argumentsOfScenario.Add("totalCount", totalCount);
            argumentsOfScenario.Add("lPageSize", lPageSize);
            argumentsOfScenario.Add("lPageNumber", lPageNumber);
            argumentsOfScenario.Add("CurrentPageSize", currentPageSize);
            argumentsOfScenario.Add("CurrentStartIndex", currentStartIndex);
            argumentsOfScenario.Add("CurrentEndIndex", currentEndIndex);
            argumentsOfScenario.Add("lTotalPages", lTotalPages);
            argumentsOfScenario.Add("hasPrevious", hasPrevious);
            argumentsOfScenario.Add("hasNext", hasNext);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pagination list give consistant data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 16
 testRunner.When(string.Format("Pagination list is created with {0} and {1}", pageNumber, pageSize), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then(string.Format("Pagination list must have pageSize = {0}", lPageSize), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.And(string.Format("Page number = {0}", lPageNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 19
 testRunner.And(string.Format("Current page size = {0}", currentPageSize), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 20
 testRunner.And(string.Format("Current start index = {0}", currentStartIndex), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 21
 testRunner.And(string.Format("Current end index = {0}", currentEndIndex), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 22
 testRunner.And(string.Format("Total page = {0}", lTotalPages), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 23
 testRunner.And(string.Format("Has previous is {0}", hasPrevious), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 24
 testRunner.And(string.Format("Has next is {0}", hasNext), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PagedListFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PagedListFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
